{
  "info": {
    "name": "ICLR Rating Tests",
    "description": "Comprehensive test collection for ICLR Rating Application handling 20,000+ papers",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{baseUrl}}",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "{{authToken}}",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "{{userId}}",
      "type": "string"
    },
    {
      "key": "paperId",
      "value": "{{paperId}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPass123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@example.com\",\n  \"nickName\": \"tester\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/user/signup",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user", "signup"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.expect(responseJson.user).to.have.property('username');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set(\"userId\", responseJson.user._id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"TestPass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/user/signin",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user", "signin"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set(\"authToken\", responseJson.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "User Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/user/signout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user", "signout"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Paper Management",
      "item": [
        {
          "name": "Get All Papers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test(\"Response has papers array\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('papers');",
                  "    pm.expect(responseJson.papers).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.papers && responseJson.papers.length > 0) {",
                  "        pm.collectionVariables.set(\"paperId\", responseJson.papers[0]._id);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Papers with Pagination",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/pagination/1/50",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "pagination", "1", "50"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 300ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});",
                  "",
                  "pm.test(\"Pagination works correctly\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.papers).to.have.length.at.most(50);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Papers by Title",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/search/machine learning",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "search", "machine learning"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are relevant\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.papers && responseJson.papers.length > 0) {",
                  "        const firstPaper = responseJson.papers[0];",
                  "        pm.expect(firstPaper.title.toLowerCase()).to.include('machine');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Random Papers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/random",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "random"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Random papers are returned\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.papers).to.be.an('array');",
                  "    pm.expect(responseJson.papers.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Year Management",
      "item": [
        {
          "name": "Get Current Year",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/year",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "year"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Valid year is returned\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    const validYears = [2024, 2025, 2026];",
                  "    pm.expect(validYears).to.include(responseJson.currentYear);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Set Year",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"year\": 2025\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/iclr/year",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "year"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Comments & Likes",
      "item": [
        {
          "name": "Like Paper",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paperId\": \"{{paperId}}\",\n  \"userId\": \"{{userId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/public/comments/like",
              "host": ["{{baseUrl}}"],
              "path": ["api", "public", "comments", "like"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Comment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paperId\": \"{{paperId}}\",\n  \"userId\": \"{{userId}}\",\n  \"comment\": \"This is a test comment for performance testing.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/public/comments/comment",
              "host": ["{{baseUrl}}"],
              "path": ["api", "public", "comments", "comment"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Prediction System",
      "item": [
        {
          "name": "Get Prediction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paperId\": \"{{paperId}}\",\n  \"prompt\": \"Will this paper be accepted?\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/prompt/prediction",
              "host": ["{{baseUrl}}"],
              "path": ["api", "prompt", "prediction"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Prediction response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Load Test - Get Papers",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/pagination/1/100",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "pagination", "1", "100"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 1 second\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Concurrent Users Test",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/random",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "random"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time under 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Data Integrity Tests",
      "item": [
        {
          "name": "Validate Paper Schema",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr/pagination/1/10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr", "pagination", "1", "10"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Paper schema validation\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.papers && responseJson.papers.length > 0) {",
                  "        const paper = responseJson.papers[0];",
                  "        pm.expect(paper).to.have.property('title');",
                  "        pm.expect(paper).to.have.property('authors');",
                  "        pm.expect(paper).to.have.property('abstract');",
                  "        pm.expect(paper).to.have.property('decision');",
                  "        pm.expect(paper.authors).to.be.an('array');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Check Data Consistency",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/iclr",
              "host": ["{{baseUrl}}"],
              "path": ["api", "iclr"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Data consistency check\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.papers) {",
                  "        // Check for duplicate IDs",
                  "        const ids = responseJson.papers.map(p => p._id);",
                  "        const uniqueIds = [...new Set(ids)];",
                  "        pm.expect(ids.length).to.equal(uniqueIds.length);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
} 